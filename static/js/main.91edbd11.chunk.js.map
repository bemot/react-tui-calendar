{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","calendarRef","createRef","useState","currView","setCurrView","newScheduleList","setNewScheduleList","scheduleList","setSchedule","useEffect","name","check","filterCat","setFilterCat","calendarInstance","current","getInstance","forEach","filter","index","toggleSchedules","toString","calendarOptions","usageStatistics","theme","taskView","scheduleView","view","disableDblClick","disableClick","useDetailPopup","useCreationPopup","schedules","calendars","id","bgColor","borderColor","onBeforeCreateSchedule","event","copySchedule","newSchedule","Date","now","calendarId","title","category","start","end","push","onBeforeUpdateSchedule","updateSchedule","updatedId","schedule","item","onBeforeDeleteSchedule","deleteId","splice","className","map","key","onClick","handleCurrView","prev","next","today","openCreationPopup","type","checked","onChange","catIndex","copyFilterCat","handleFilterCat","ref","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.91edbd11.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect, createRef } from 'react';\nimport './App.css';\nimport Calendar from '@toast-ui/react-calendar'\nimport 'tui-calendar/dist/tui-calendar.css'\nimport 'tui-date-picker/dist/tui-date-picker.css'\nimport 'tui-time-picker/dist/tui-time-picker.css'\n\nexport default function App() {\n  \n  //Custom theme for the calendar\n  const customTheme = {\n    //Common style\n    'common.border': 'thin solid #796bbb',\n    'common.backgroundColor': '#161331',\n    'common.holiday.color': '#f54f3d',\n    'common.saturday.color': '#9d93d5',\n    'common.dayname.color': '#ffffff',\n\n    //Month header 'dayname'\n    'month.dayname.height': '42px',\n    'month.dayname.borderLeft': 'none',\n    'month.dayname.paddingLeft': '0',\n    'month.dayname.paddingRight': '0',\n    'month.dayname.fontSize': '13px',\n    'month.dayname.backgroundColor': 'inherit',\n    'month.dayname.fontWeight': 'normal',\n    'month.dayname.textAlign': 'center',\n\n    // month day grid cell 'day'\n    // 'month.holidayExceptThisMonth.color': '#f3acac',\n    'month.dayExceptThisMonth.color': '#ffffff42',\n    // 'month.weekend.backgroundColor': '#fafafa',\n    'month.day.fontSize': '16px',\n\n    // month schedule style\n    'month.schedule.borderRadius': '5px',\n    'month.schedule.height': '18px',\n    // 'month.schedule.marginTop': '2px',\n    'month.schedule.marginLeft': '10px',\n    'month.schedule.marginRight': '10px',\n\n    // month more view\n    // 'month.moreView.boxShadow': 'none',\n    // 'month.moreView.paddingBottom': '0',\n    // 'month.moreView.border': '1px solid #9384e1',\n    // 'month.moreView.backgroundColor': 'rgba(38,34,74,.49)',\n    // 'month.moreViewTitle.height': '28px',\n    // 'month.moreViewTitle.marginBottom': '0',\n    // 'month.moreViewTitle.backgroundColor': '#1b1539',\n    // 'month.moreViewTitle.borderBottom': '1px solid #9384e1',\n    // 'month.moreViewTitle.padding': '0 10px',\n    // 'month.moreViewList.padding': '10px',\n    // 'month.moreViewTitle.color': '#ffffff',\n\n    //  // week header 'dayname'\n    //  'week.dayname.height': '41px',\n    //  'week.dayname.borderTop': '1px solid #ddd',\n    //  'week.dayname.borderBottom': '1px solid #ddd',\n    //  'week.dayname.borderLeft': '1px solid #ddd',\n    //  'week.dayname.paddingLeft': '5px',\n    //  'week.dayname.backgroundColor': 'inherit',\n    'week.dayname.textAlign': 'center',\n    'week.today.color': '#00f298',\n    //  'week.pastDay.color': '#999',\n\n    //  // week vertical panel 'vpanel'\n    //  'week.vpanelSplitter.border': '1px solid #ddd',\n    //  'week.vpanelSplitter.height': '3px',\n\n    //  // week daygrid 'daygrid'\n    //  'week.daygrid.borderRight': '1px solid #ddd',\n    //  'week.daygrid.backgroundColor': 'inherit',\n\n    //  'week.daygridLeft.width': '77px',\n    //  'week.daygridLeft.backgroundColor': '#a8def74d',\n    //  'week.daygridLeft.paddingRight': '5px',\n    //  'week.daygridLeft.borderRight': '1px solid #ddd',\n\n    //  'week.today.backgroundColor': '#b857d81f',\n    //  'week.weekend.backgroundColor': 'inherit',\n\n    //  // week timegrid 'timegrid'\n    //  'week.timegridLeft.width': '77px',\n    'week.timegridLeft.backgroundColor': 'rgba(38, 34, 74, .49)',\n    //  'week.timegridLeft.borderRight': '1px solid #ddd',\n    //  'week.timegridLeft.fontSize': '12px',\n    //  'week.timegridLeftTimezoneLabel.height': '51px',\n    //  'week.timegridLeftAdditionalTimezone.backgroundColor': '#fdfdfd',\n\n    //  'week.timegridOneHour.height': '48px',\n    //  'week.timegridHalfHour.height': '24px',\n    //  'week.timegridHalfHour.borderBottom': '1px dotted #f9f9f9',\n    //  'week.timegridHorizontalLine.borderBottom': '1px solid #eee',\n\n    //  'week.timegrid.paddingRight': '10px',\n    //  'week.timegrid.borderRight': '1px solid #ddd',\n    //  'week.timegridSchedule.borderRadius': '0',\n    //  'week.timegridSchedule.paddingLeft': '0',\n\n    //  'week.currentTime.color': '#135de6',\n    //  'week.currentTime.fontSize': '12px',\n    //  'week.currentTime.fontWeight': 'bold',\n\n    //  'week.pastTime.color': '#808080',\n    //  'week.pastTime.fontWeight': 'normal',\n\n    //  'week.futureTime.color': '#333',\n    //  'week.futureTime.fontWeight': 'normal',\n\n    //  'week.currentTimeLinePast.border': '1px solid rgba(19, 93, 230, 0.3)',\n    //  'week.currentTimeLineBullet.backgroundColor': '#135de6',\n    //  'week.currentTimeLineToday.border': '1px solid #135de6',\n    //  'week.currentTimeLineFuture.border': '1px solid #135de6',\n\n    //  // week creation guide style\n    //  'week.creationGuide.color': '#135de6',\n    //  'week.creationGuide.fontSize': '12px',\n    //  'week.creationGuide.fontWeight': 'bold',\n\n    //  // week daygrid schedule style\n    //  'week.dayGridSchedule.borderRadius': '0',\n    //  'week.dayGridSchedule.height': '18px',\n    //  'week.dayGridSchedule.marginTop': '2px',\n    //  'week.dayGridSchedule.marginLeft': '10px',\n    //  'week.dayGridSchedule.marginRight': '10px'\n  }\n\n  const calendarRef = createRef()\n\n  //Set view of the calendar\n  const [currView, setCurrView] = useState('month')\n\n  const handleCurrView = view => {\n    setCurrView(view)\n  }\n\n  const view = [\n    'day',\n    'week',\n    'month'\n  ]\n\n\n  //Preview and Next function for the calendar\n  const handlePrevButton = () => {\n    const calendarInstance = calendarRef.current.getInstance()\n    calendarInstance.prev()\n  }\n\n  const handleNextButton = () => {\n    const calendarInstance = calendarRef.current.getInstance()\n    calendarInstance.next()\n  }\n\n  // Today function\n  const handleTodayButton = () => {\n    const calendarInstance = calendarRef.current.getInstance()\n    calendarInstance.today()\n  }\n  \n\n  //Sample schedule\n  const [newScheduleList, setNewScheduleList] = useState([])\n  const [scheduleList, setSchedule] = useState([])\n\n  //Calendar schedule categories\n  const calendarCat = [\n    {\n      id: '0',\n      name: 'Providers',\n      bgColor: '#9e5fff',\n      borderColor: '#9e5fff'\n    },\n    {\n      id: '1',\n      name: 'Location',\n      bgColor: '#00a9ff',\n      borderColor: '#00a9ff'\n    },\n    {\n      id: '2',\n      name: 'Rooms',\n      bgColor: '#03bd9e',\n      borderColor: '#03bd9e'\n    }\n  ]\n\n  //New schedule popup\n  const handleNewSchedule = event => {\n    const calendarInstance = calendarRef.current.getInstance()\n    calendarInstance.openCreationPopup(event.schedule)\n  }\n\n  //Create new schedule\n  const handleCreateSchedule = event => {\n    let copySchedule = newScheduleList\n\n    let newSchedule = {\n      id: Date.now(),\n      calendarId: event.calendarId,\n      title: event.title,\n      category: 'time',\n      start: event.start,\n      end: event.end\n    }\n\n    copySchedule.push(newSchedule)\n\n    setNewScheduleList([...copySchedule])\n  }\n\n  //Edit schedule\n  const handleUpdateSchedule = event => {\n    const updatedId = event.schedule.id\n    let copySchedule = newScheduleList\n    let updateSchedule\n\n    copySchedule.forEach((item, index) => {\n      if (item.id === updatedId) {\n        updateSchedule = {\n          id: event.schedule.id,\n          calendarId: event.schedule.calendarId,\n          title: event.schedule.title,\n          category: 'time',\n          start: event.start,\n          end: event.end\n        }\n\n        copySchedule[index] = updateSchedule\n      }\n    })\n\n    setNewScheduleList([...copySchedule])\n  }\n\n  //Delete schedule\n  const handleDeleteSchedule = event => {\n    const deleteId = event.schedule.id\n    let copySchedule = newScheduleList\n\n    copySchedule.forEach((item, index) => {\n      if (item.id === deleteId) {\n        copySchedule.splice(index, 1)\n      }\n    })\n\n    setNewScheduleList([...copySchedule])\n  }\n\n  //Set current Schedule\n  useEffect(() => {\n    setSchedule(newScheduleList)\n  }, [scheduleList, newScheduleList])\n\n  //Filter schedule category\n  const [filterCat, setFilterCat] = useState([\n    {\n      name: 'Providers',\n      check: true\n    },\n    {\n      name: 'Location',\n      check: true\n    },\n    {\n      name: 'Rooms',\n      check: true\n    },\n  ])  \n\n  const handleFilterCat = catIndex => {\n    let copyFilterCat = filterCat\n\n    copyFilterCat[catIndex].check = !copyFilterCat[catIndex].check\n    setFilterCat([...copyFilterCat])\n  }\n\n  useEffect(() => {\n    const calendarInstance = calendarRef.current.getInstance()\n\n    filterCat.forEach((filter, index) => {\n      if (filter.check === true) {\n        calendarInstance.toggleSchedules(index.toString(), false, true)\n      } else {\n        calendarInstance.toggleSchedules(index.toString(), true, true)\n      }\n    })\n  })\n\n  //Custom schedule popup template\n  // const schedPopupTemplate = {\n  //   titlePlaceholder: () => {\n  //     return 'Subject'\n  //   }\n  // }\n\n  //Set calendar features/options\n  const calendarOptions = {\n    usageStatistics: false,\n    theme: customTheme,\n    taskView: false,\n    scheduleView: true,\n    view: currView,\n    disableDblClick: true,\n    disableClick: false,\n    useDetailPopup: true,\n    useCreationPopup: true,\n    schedules: scheduleList,\n    // template: schedPopupTemplate,\n    calendars: calendarCat,\n    onBeforeCreateSchedule: handleCreateSchedule,\n    onBeforeUpdateSchedule: handleUpdateSchedule,\n    onBeforeDeleteSchedule: handleDeleteSchedule,\n  }\n\n  return (\n    <div className=\"App\">\n      <div>\n        {view.map(item => (\n          <button key={item} onClick={() => handleCurrView(item)}>{item}</button>\n        ))}\n      </div>\n      <div>\n        <button onClick={handlePrevButton}>Prev</button>\n        <button onClick={handleNextButton}>Next</button>\n      </div>\n      <div>\n        <button onClick={handleTodayButton}>Today</button>\n      </div>\n      <div>\n        <button onClick={handleNewSchedule}>New Schedule</button>\n      </div>\n      <div>\n        {filterCat.map((item,index) => (\n          <label key={index}><input type=\"checkbox\" checked={item.check} onChange={() => handleFilterCat(index)}/>{item.name}</label>\n        ))}\n      </div>\n      <Calendar\n        ref={calendarRef}\n        {...calendarOptions}\n      />\n    </div>\n  );\n}\n"],"sourceRoot":""}